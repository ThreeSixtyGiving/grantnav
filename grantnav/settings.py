"""
Django settings for grantnav project.

Generated by 'django-admin startproject' using Django 1.9.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import warnings
from django.utils.crypto import get_random_string
import environ

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#%^&*(-_=+)'
secret_key = get_random_string(50, chars)
if 'SECRET_KEY' not in os.environ:
    warnings.warn('SECRET_KEY should be added to Enviroment Variables. Random key will be used instead.')

env = environ.Env(  # set default values and casting
    SENTRY_DSN=(str, ''),
    DEBUG=(bool, False),
    PIWIK_URL=(str, ''),
    PIWIK_SITE_ID=(str, ''),
    ALLOWED_HOSTS=(list, []),
    SECRET_KEY=(str, secret_key),
    GRANT_SCHEMA=(str, 'https://raw.githubusercontent.com/ThreeSixtyGiving/standard/main/schema/360-giving-schema.json'),
    DB_NAME=(str, os.path.join(BASE_DIR, 'db.sqlite3')),
    PROVENANCE_JSON=(str, None),
    ELASTICSEARCH_HOST=(str, 'localhost'),
    INSIGHTS_BASE_URL=(str, "https://insights.threesixtygiving.org")
)

PIWIK = {
    'url': env('PIWIK_URL'),
    'site_id': env('PIWIK_SITE_ID'),
}

# Plotly
PLOTLY_JS_CDN = 'https://cdn.plot.ly/plotly-1.54.6.min.js'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ELASTICSEARCH_HOST = env('ELASTICSEARCH_HOST')

ALLOWED_HOSTS = env('ALLOWED_HOSTS')

RAVEN_CONFIG = {
    'dsn': env('SENTRY_DSN')
}

GRANT_SCHEMA = env('GRANT_SCHEMA')

# Set these to sensible limits for your server
FLATTENED_DOWNLOAD_LIMIT = 10000

PROVENANCE_JSON = env('PROVENANCE_JSON')

# Application definition

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.humanize',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bootstrap3',
    'grantnav.frontend',
    'grantnav.prometheus',
    'grantnav.api',
    'raven.contrib.django.raven_compat',
    'favicon',
)

if DEBUG:
    INSTALLED_APPS = INSTALLED_APPS + ("corsheaders",)

MIDDLEWARE = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'dealer.contrib.django.Middleware',
)

if DEBUG:
    MIDDLEWARE = ("corsheaders.middleware.CorsMiddleware",) + MIDDLEWARE

ROOT_URLCONF = 'grantnav.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'grantnav.frontend.context_processors.piwik',
                'grantnav.frontend.context_processors.navigation',
                'grantnav.frontend.context_processors.main_css_cache_key',
                'grantnav.frontend.context_processors.debug_mode',
                'grantnav.frontend.context_processors.insights_url',
            ],
        },
    },
]

WSGI_APPLICATION = 'grantnav.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

DEALER_TYPE = 'git'
# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/grantnav_static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'root': {
        'level': 'WARNING',
        'handlers': ['sentry'],
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s '
                      '%(process)d %(thread)d %(message)s'
        },
    },
    'handlers': {
        'sentry': {
            'level': 'ERROR',
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'null': {
            'class': 'logging.NullHandler',
        }
    },
    'loggers': {
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
        'django.security.DisallowedHost': {
            "handlers": ["null"],
            "propagate": False,
        },
        'raven': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
        'sentry.errors': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
    },
}

GRANTNAV_LOG_DIR = os.path.expanduser("~/logs/")

# https://docs.djangoproject.com/en/4.0/releases/3.2/#customizing-type-of-auto-created-primary-keys
# This project currently has no models, but in case it does later:
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"


if DEBUG:
    CORS_ORIGIN_ALLOW_ALL = True


CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": "/var/tmp/django_grantnav_cache",
        "TIMEOUT": 60,
        "OPTIONS": {"MAX_ENTRIES": 1000},
    }
}

INSIGHTS_BASE_URL = env("INSIGHTS_BASE_URL")
